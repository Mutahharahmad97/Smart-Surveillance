#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from API import API
from API.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool isOneAnEmployee(string name)')
    print('  bool shouldOneBeHere(string name, string zone)')
    print('  bool isUniformValid(string name, string uniform)')
    print('  string getTitle(string name)')
    print('  bool isActivityIllegal(string title, string activity)')
    print('  bool isShiftValid(string datetime)')
    print('  void reportActivity(string name, string activity)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = API.Client(protocol)
transport.open()

if cmd == 'isOneAnEmployee':
    if len(args) != 1:
        print('isOneAnEmployee requires 1 args')
        sys.exit(1)
    pp.pprint(client.isOneAnEmployee(args[0],))

elif cmd == 'shouldOneBeHere':
    if len(args) != 2:
        print('shouldOneBeHere requires 2 args')
        sys.exit(1)
    pp.pprint(client.shouldOneBeHere(args[0], args[1],))

elif cmd == 'isUniformValid':
    if len(args) != 2:
        print('isUniformValid requires 2 args')
        sys.exit(1)
    pp.pprint(client.isUniformValid(args[0], args[1],))

elif cmd == 'getTitle':
    if len(args) != 1:
        print('getTitle requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTitle(args[0],))

elif cmd == 'isActivityIllegal':
    if len(args) != 2:
        print('isActivityIllegal requires 2 args')
        sys.exit(1)
    pp.pprint(client.isActivityIllegal(args[0], args[1],))

elif cmd == 'isShiftValid':
    if len(args) != 1:
        print('isShiftValid requires 1 args')
        sys.exit(1)
    pp.pprint(client.isShiftValid(args[0],))

elif cmd == 'reportActivity':
    if len(args) != 2:
        print('reportActivity requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportActivity(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
